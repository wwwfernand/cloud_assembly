# frozen_string_literal: true

require 'rails_helper'
require 'authlogic/test_case'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/user_sessions', type: :request do
  include Authlogic::TestCase
  include_context 'with users mock'

  let(:user_session_params) { user_create_valid_params.slice(:email, :password) }

  describe 'POST /create' do
    before do
      create(:user, user_create_valid_params)
    end

    context 'with valid parameters' do
      it 'render username' do
        post login_url, params: { user_session: user_session_params }
        expect(response.parsed_body['username']).to eq(user_create_valid_params[:username])
      end
    end

    context 'with invalid email' do
      it 'renders a response with 422 status' do
        post login_url, params: { user_session: user_session_params.merge(email: 'wrong@email.com') }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end

    context 'with invalid password' do
      it 'renders a response with 422 status' do
        post login_url, params: { user_session: user_session_params.merge(password: 'wrong_password!') }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end

    context 'when existing session' do
      before do
        allow_any_instance_of(ApplicationController).to receive(:current_user).and_return(create(:user))
      end

      it 'renders a response with bad_request status' do
        post login_url, params: { user_session: user_session_params }
        expect(response).to have_http_status(:bad_request)
      end
    end
  end

  describe 'DELETE /destroy' do
    context 'when user logged in' do
      before do
        activate_authlogic
        create(:user, user_create_valid_params)
        UserSession.create!(user_session_params)
      end

      it 'return success' do
        expect(response).to be_nil
      end
    end

    context 'when no user logged in' do
      it 'ignore request and return success' do
        expect(response).to be_nil
      end
    end
  end
end
