# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/users', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.

  let(:invalid_attributes) do
    {
      username: Faker::Alphanumeric.alpha(number: 4),
      email: '1234', # invalid email
      password: 'hY5l%V2x'
    }
  end

  let(:current_user) { create(:user) }

  describe 'GET /show' do
    context 'when logged in' do
      before do
        allow_any_instance_of(ApplicationController).to receive(:current_user).and_return(current_user)
      end

      it 'renders a successful response' do
        get member_user_url(current_user)
        expect(response).to be_successful
      end
    end

    context 'when not logged in' do
      it 'redirect to root url' do
        get member_user_url(current_user)
        expect(response).to redirect_to(root_url)
      end
    end
  end
end
