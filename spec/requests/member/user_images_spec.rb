# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/user_images', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # UserImage. As you add validations to UserImage, be sure to
  # adjust the attributes here as well.

  let(:current_user) { create(:user) }

  describe 'GET /index' do
    context 'when logged in' do
      before do
        allow_any_instance_of(ApplicationController).to receive(:current_user).and_return(current_user)
        create(:user_image, user: current_user)
      end

      it 'renders a successful response' do
        get member_user_images_url
        expect(response).to be_successful
      end
    end

    context 'when not logged in' do
      it 'renders a forbidden response' do
        get member_user_images_url
        expect(response).to have_http_status(:forbidden)
      end
    end
  end

  describe 'POST /create' do
    context 'when logged in' do
      before do
        allow_any_instance_of(ApplicationController).to receive(:current_user).and_return(current_user)
        create(:user_image, user: current_user)
      end

      context 'with valid parameters' do
        let(:file) { fixture_file_upload('preloader.gif', 'image/gif') }

        it 'creates a new UserImage' do
          expect do
            post member_user_images_url, params: { user_image: { image: file } }
          end.to change(UserImage, :count).by(1)
        end

        it 'renders success' do
          post member_user_images_url, params: { user_image: { image: file } }
          expect(response).to be_successful
        end
      end

      # TODO: consider what to do on invalid files
    end

    context 'when not logged in' do
      context 'with valid parameters' do
        let(:image) { fixture_file_upload('preloader.gif', 'image/gif') }

        it 'creates a new UserImage' do
          expect do
            post member_user_images_url, params: { user_image: { image: } }
          end.not_to change(UserImage, :count)
        end

        it 'renders a forbidden response' do
          post member_user_images_url, params: { user_image: { image: } }
          expect(response).to have_http_status(:forbidden)
        end
      end
    end
  end
end
